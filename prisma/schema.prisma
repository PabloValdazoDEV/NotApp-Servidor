generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ROLE {
    OWNER
    ADMIN
    MEMBER
}

enum CATEGORY {
    FRUTAS_VERDURAS
    LACTEOS
    CARNE
    PESCADO
    BEBIDAS
    PANADERIA
    DULCES
    CONGELADOS
    HIGIENE
    LIMPIEZA
    MASCOTAS
    OTROS
}

model User {
    id            String         @id @default(uuid())
    email         String         @unique
    name          String?
    password      String
    image         String?
    error_logins  ErrorLogin[]
    members       Member[]
    invitations   Invitation[]
    oneTimeTokens OneTimeToken[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
}

model Member {
    id      String @id @default(uuid())
    user_id String
    home_id String
    role    ROLE
    user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
    home    Home   @relation(fields: [home_id], references: [id], onDelete: Cascade)
}

model Invitation {
    id      String @id @default(uuid())
    user_id String
    home_id String
    user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
    home    Home   @relation(fields: [home_id], references: [id], onDelete: Cascade)
}

model ErrorLogin {
    id       String   @id @default(uuid())
    user_id  String
    user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    date_try DateTime @default(now())
}

model Home {
    id          String       @id @default(uuid())
    name        String
    image       String?
    members     Member[]
    invitations Invitation[]
    lists       List[]
    items       Item[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model List {
    id        String     @id @default(uuid())
    title     String
    home_id   String
    fav       Boolean    @default(false)
    listCheck Boolean    @default(false)
    itemsList ItemList[]
    home      Home       @relation(fields: [home_id], references: [id], onDelete: Cascade)
    createdAt DateTime?  @default(now())
    updatedAt DateTime?  @updatedAt
}

model ItemList {
    id         String    @id @default(uuid())
    item_id    String
    list_id    String
    quantity   Int       @default(1)
    check_take Boolean   @default(false)
    list       List      @relation(fields: [list_id], references: [id], onDelete: Cascade)
    item       Item      @relation(fields: [item_id], references: [id], onDelete: Cascade)
    createdAt  DateTime? @default(now())
    updatedAt  DateTime? @updatedAt

    @@unique([item_id, list_id])
}

model Item {
    id          String     @id @default(uuid())
    name        String
    home_id     String
    image       String?
    price       String?
    description String?
    categories  CATEGORY[]
    itemsList   ItemList[]
    home        Home       @relation(fields: [home_id], references: [id], onDelete: Cascade)
    createdAt   DateTime?  @default(now())
    updatedAt   DateTime?  @updatedAt
}

model OneTimeToken {
    id        String   @id @default(uuid())
    token     String   @unique
    purpose   String
    user_id   String?
    user      User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
    used      Boolean  @default(false)
    expiresAt DateTime
    createdAt DateTime @default(now())
}
